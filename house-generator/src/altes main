

/*
const scene = new THREE.Scene();

// Camera
// (fov, aspect ratio,  view frustrum, view frustru,)
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);



// Renderer
const renderer = new THREE.WebGLRenderer({
  canvas: document.querySelector('#bg'),
});

renderer.setPixelRatio(window.devicePixelRatio);
renderer.setSize(window.innerWidth, window.innerHeight);
camera.position.setZ(30);

//Draw-once method
renderer.render(scene, camera);

// Geometry
// Unterliegende Geometrie so erzeugbar:
var geometry = new THREE.ConeGeometry(10, 10, 40, 40, false);

//  Basic Material: nur Farbe
//const material = new THREE.MeshBasicMaterial({ color: 0xFF6347, wireframe: true });

// Standard Material: Farbe, plus braucht Lighting!
const material = new THREE.MeshStandardMaterial({ color: 0xFF6347 })

// Mesh: kombiniere Geometry mit Material

const cone = new THREE.Mesh(geometry, material);

//scene.add(cone);




// js class / Shape Geometry Mesh example
// Fügt rotes Quadrat ein.

const shapeVertices = [
  new THREE.Vector2(0, 0),
  new THREE.Vector2(5, 0),
  new THREE.Vector2(2.5, 5),
  new THREE.Vector2(2.0, 0),
  //closing really necessary?
  //new THREE.Vector2(0,0),
];


//  ShapeObject Test
console.log(shapeVertices);

var shape1 = new ShapeObject(shapeVertices, 0x00ff00);

var shape1mesh = shape1.getMesh();
shape1mesh.position.set(0, 0, 5);
//shape1mesh.scale.set(0,0,20);
shape1mesh.rotation.set(0, 0, 0);
shape1mesh.add(new THREE.AxesHelper(5));
//console.log(shape1mesh);
//console.log(shape1mesh.visible);


//scene.add(shape1mesh);
// Buffer Geometry Example End



// House Example: House Area 50, Garden Area 60, 5 Apartments with min size 6 and max size 14
console.log("main do house")
var newHouse = new House(50, 60, 5, 6, 14);
//var houseMesh = newHouse.getHouseMesh();
// HouseMesh = null ?!?
//console.log(houseMesh);

let allHouseMeshes = newHouse.getAllMeshes();
console.log("all meshes: ", allHouseMeshes);

// X red Y green Z Blue
allHouseMeshes[0].add(new THREE.AxesHelper(5));
for (let mesh of allHouseMeshes) {
  scene.add(mesh);
}


let housePointHelper = newHouse.getPointHelperMesh(0, 0);
console.log("pointhelper", housePointHelper)
scene.add(housePointHelper);



// Sphere example:


const spheregeometry = new THREE.SphereGeometry(0.1, 32, 16);
const spherematerial = new THREE.MeshBasicMaterial({ color: 0xffff00 });
const sphere = new THREE.Mesh(spheregeometry, spherematerial);
//scene.add(sphere);

// Apartment by height/width/position Example 
console.log("main do apartment")
let apColor = new THREE.Color(Math.random(), Math.random(), Math.random());
let newApartment = new Apartment(40, apColor, 10, 4, 2, 2);
let apartmentMesh = newApartment.mesh;
console.log(apartmentMesh);
//scene.add(apartmentMesh);

// BoxHelper
const boxHelper = new THREE.BoxHelper(shape1mesh, 0xff0000);
//scene.add(boxHelper);
// Box example



// Shape test with basic shape
/*
const testshape = new THREE.Shape();
testshape.moveTo(0, 0);
testshape.lineTo(5, 0);
testshape.lineTo(2.5, 5);
testshape.lineTo(0, 0);


const testgeometry = new THREE.ShapeGeometry(testshape);
const testmaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, side: THREE.DoubleSide });
const testmesh = new THREE.Mesh(testgeometry, testmaterial);
scene.add(testmesh);
*/


var geometry2 = new THREE.BoxGeometry(4, 4, 4);
const cube = new THREE.Mesh(geometry2, material);
cube.position.set(0, 20, 0);
cube.add(new THREE.AxesHelper(5));
//scene.add(cube);







// Helpers: Development-Hilfen wie Raster, Positionsanzeigen von Elementen, ...
const lighthelper = new THREE.PointLightHelper(pointLight);
const gridhelper = new THREE.GridHelper(200, 50);

scene.add(lighthelper, gridhelper);


const oControls = new OrbitControls(camera, renderer.domElement);

//scene.add(oControls);

let maxSegments = 40;
let minSegments = 10;
let direction = 1;
let currentSegments = 10;

// Besser als immer "render()" aufrufen: Konstant "render" in animate aufrufen
// = basically game loop
function animate() {


  // Rekursives aufrufen von Animate
  requestAnimationFrame(animate);

  // Hier Sachen, die geändert werden sollen!

  currentSegments += direction;

  if (currentSegments >= maxSegments) direction = -0.1;
  if (currentSegments <= minSegments) direction = 0.1;

  //print(currentSegments)
  //console.log(currentSegments)

  geometry = new THREE.ConeGeometry(10, 10, currentSegments, currentSegments, true);
  //cone.geometry.seg
  // Reassign the new geometry
  cone.geometry = geometry;

  cone.rotateX(0.01);

  // Update Controls
  oControls.update();

  // Rerender/Draw
  renderer.render(scene, camera);
}


// Einmal aufrufen, dann rekursiv
animate();


// https://www.youtube.com/watch?v=Q7AOvWpIVHU
// Weiter bei "Helpers"

